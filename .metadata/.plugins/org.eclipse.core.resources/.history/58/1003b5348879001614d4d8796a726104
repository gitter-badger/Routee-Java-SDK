package net.routee.contacts;

import java.io.IOException;
import java.util.ArrayList;

import org.json.JSONArray;
import org.json.JSONObject;

import net.routee.authentication.RouteeAuthentication;
import net.routee.authentication.RouteeAuthenticationException;
import okhttp3.MediaType;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.RequestBody;
import okhttp3.Response;

// TODO: Auto-generated Javadoc
/**
 * The Class RouteeContactsClient.
 */
public class RouteeContactsClient {


  /** The Constant DEFAULT_BASE_URL. */
  public static final String DEFAULT_BASE_URL = "https://connect.routee.net";

  /** The Constant ENDPOINT_CONTACTS. */
  public static final String ENDPOINT_CONTACTS = "/contacts/my";

  /** The Constant ENDPOINT_GROUPS. */
  public static final String ENDPOINT_GROUPS = "/groups/my";



  /** The auth. */
  private RouteeAuthentication auth = null;

  /** The http client. */
  private OkHttpClient httpClient = null;



  /**
   * Instantiates a new routee contacts client.
   *
   * @param applicationId the application id
   * @param applicationSecret the application secret
   */
  public RouteeContactsClient(final String applicationId, final String applicationSecret) {
    this.auth = new RouteeAuthentication(applicationId, applicationSecret);
  }

  /**
   * Instantiates a new routee contacts client.
   *
   * @param auth the auth
   */
  public RouteeContactsClient(RouteeAuthentication auth) {
    this.auth = auth;
  }


  /**
   * Creates the contact.
   *
   * @param contact the contact
   * @return the contact
   * @throws RouteeAuthenticationException the routee authentication exception
   * @throws IOException Signals that an I/O exception has occurred.
   * @throws RouteeContactsException the routee contacts exception
   */
  public Contact createContact(Contact contact)
      throws RouteeAuthenticationException, IOException, RouteeContactsException {
    if (this.httpClient == null)
      this.httpClient = new OkHttpClient();
    MediaType mediaType = MediaType.parse("application/json");
    RequestBody body = null;
    JSONObject jsonBody = new JSONObject();
    ArrayList<Label> labels = contact.getLabels();
    if (labels != null) {
      for (int i = 0; i < labels.size(); i++) {
        Label label = labels.get(i);
        JSONObject jsonLabel = new JSONObject();
        jsonLabel.put("name", label.getName());
        jsonLabel.put("value", label.getValue());
        jsonBody.append("labels", jsonLabel);
      }
    }
    jsonBody.put("email", contact.getEmail());
    jsonBody.put("firstName", contact.getFirstName());
    jsonBody.put("lastName", contact.getLastName());
    jsonBody.put("mobile", contact.getMobile());
    jsonBody.put("vip", contact.isVip());
    body = RequestBody.create(mediaType, jsonBody.toString());
    Request request = new Request.Builder().url(DEFAULT_BASE_URL + ENDPOINT_CONTACTS).post(body)
        .addHeader("authorization", "Bearer " + this.auth.getToken())
        .addHeader("content-type", "application/json").build();
    Response response = httpClient.newCall(request).execute();
    int responseCode = response.code();
    if (responseCode == 400 || responseCode == 404 || responseCode == 409) {
      throw new RouteeContactsException(response.body().string());
    }
    JSONObject result = new JSONObject(response.body().string());
    Contact resultContact = new Contact();
    resultContact.setContactId(result.getString("id"));
    resultContact.setVip(result.getBoolean("vip"));
    resultContact.setLastName(result.getString("lastName"));
    resultContact.setFirstName(result.getString("firstName"));
    resultContact.setEmail(result.getString("email"));
    resultContact.setMobile(result.getString("mobile"));
    resultContact.setCountry(result.getString("country"));
    if (result.has("labels")) {
      JSONArray labelsArray = result.getJSONArray("labels");
      for (int i = 0; i < labelsArray.length(); i++) {
        JSONObject labelJson = labelsArray.getJSONObject(i);
        Label label = new Label();
        label.setName(labelJson.getString("name"));
        label.setValue(labelJson.getString("value"));
        label.setType(labelJson.getString("type"));
        resultContact.addLabel(label);
      }
    }
    if (result.has("blacklistedServices")) {
      JSONArray blacklistedServicesArray = result.getJSONArray("blacklistedServices");
      for (int i = 0; i < blacklistedServicesArray.length(); i++) {
        String service = blacklistedServicesArray.getString(i);
        resultContact.addBlacklistedService(service);
      }
    }
    JSONArray groupsArray = result.getJSONArray("groups");
    for (int i = 0; i < groupsArray.length(); i++) {
      Group group = new Group();
      group.setName(groupsArray.getString(i));
      resultContact.addGroup(group);
    }
    return resultContact;
  }

  /**
   * Delete multiple contacts.
   *
   * @param contactIds the contact ids
   * @return the array list
   * @throws RouteeAuthenticationException the routee authentication exception
   * @throws IOException Signals that an I/O exception has occurred.
   * @throws RouteeContactsException the routee contacts exception
   */
  public ArrayList<String> deleteMultipleContacts(ArrayList<String> contactIds)
      throws RouteeAuthenticationException, IOException, RouteeContactsException {
    if (this.httpClient == null)
      this.httpClient = new OkHttpClient();
    MediaType mediaType = MediaType.parse("application/json");
    RequestBody body = null;
    JSONArray jsonBody = new JSONArray();
    for (int i = 0; i < contactIds.size(); i++) {
      jsonBody.put(contactIds.get(i));
    }
    body = RequestBody.create(mediaType, jsonBody.toString());
    Request request = new Request.Builder().url(DEFAULT_BASE_URL + ENDPOINT_CONTACTS).delete(body)
        .addHeader("authorization", "Bearer " + this.auth.getToken())
        .addHeader("content-type", "application/json").build();
    Response response = httpClient.newCall(request).execute();
    int responseCode = response.code();
    if (responseCode == 404 || responseCode == 500) {
      throw new RouteeContactsException(response.body().string());
    }
    return contactIds;
  }

  /**
   * Retrieve all contacts.
   *
   * @return the retrieve contacts response
   * @throws RouteeAuthenticationException the routee authentication exception
   * @throws IOException Signals that an I/O exception has occurred.
   * @throws RouteeContactsException the routee contacts exception
   */
  public RetrieveContactsResponse retrieveAllContacts()
      throws RouteeAuthenticationException, IOException, RouteeContactsException {
    if (this.httpClient == null)
      this.httpClient = new OkHttpClient();
    Request request = new Request.Builder().url(DEFAULT_BASE_URL + ENDPOINT_CONTACTS).get()
        .addHeader("authorization", "Bearer " + this.auth.getToken())
        .addHeader("content-type", "application/json").build();
    Response response = httpClient.newCall(request).execute();
    int responseCode = response.code();
    if (responseCode == 404) {
      throw new RouteeContactsException(response.body().string());
    }
    JSONObject result = new JSONObject(response.body().string());
    RetrieveContactsResponse responseContacts = new RetrieveContactsResponse();
    responseContacts.setFirst(result.getBoolean("first"));
    responseContacts.setLast(result.getBoolean("last"));
    responseContacts.setNumber(result.getInt("number"));
    responseContacts.setNumberOfElements(result.getInt("numberOfElements"));
    responseContacts.setSize(result.getInt("size"));
    responseContacts.setTotalPages(result.getInt("totalPages"));
    if (result.has("content")) {
      JSONArray contactsArray = result.getJSONArray("content");
      for (int i = 0; i < contactsArray.length(); i++) {
        JSONObject contactJSON = contactsArray.getJSONObject(i);
        Contact resultContact = new Contact();
        resultContact.setContactId(contactJSON.getString("id"));
        resultContact.setVip(contactJSON.getBoolean("vip"));
        resultContact.setLastName(contactJSON.getString("lastName"));
        resultContact.setFirstName(contactJSON.getString("firstName"));
        resultContact.setEmail(contactJSON.getString("email"));
        resultContact.setMobile(contactJSON.getString("mobile"));
        resultContact.setCountry(contactJSON.getString("country"));
        if (contactJSON.has("labels")) {
          JSONArray labelsArray = contactJSON.getJSONArray("labels");
          for (int j = 0; j < labelsArray.length(); j++) {
            JSONObject labelJson = labelsArray.getJSONObject(j);
            Label label = new Label();
            label.setName(labelJson.getString("name"));
            label.setValue(labelJson.getString("value"));
            label.setType(labelJson.getString("type"));
            resultContact.addLabel(label);
          }
        }
        JSONArray blacklistedServicesArray = contactJSON.getJSONArray("blacklistedServices");
        for (int j = 0; j < blacklistedServicesArray.length(); j++) {
          String service = blacklistedServicesArray.getString(j);
          resultContact.addBlacklistedService(service);
        }
        JSONArray groupsArray = contactJSON.getJSONArray("groups");
        for (int j = 0; j < groupsArray.length(); j++) {
          Group group = new Group();
          group.setName(groupsArray.getString(j));
          resultContact.addGroup(group);
        }
        responseContacts.addContact(resultContact);
      }
    }
    return responseContacts;
  }


  /**
   * Retrieve all contacts.
   *
   * @param page the page
   * @return the retrieve contacts response
   * @throws IOException Signals that an I/O exception has occurred.
   * @throws RouteeAuthenticationException the routee authentication exception
   * @throws RouteeContactsException the routee contacts exception
   */
  public RetrieveContactsResponse retrieveAllContacts(int page)
      throws IOException, RouteeAuthenticationException, RouteeContactsException {
    if (this.httpClient == null)
      this.httpClient = new OkHttpClient();
    Request request =
        new Request.Builder().url(DEFAULT_BASE_URL + ENDPOINT_CONTACTS + "? page=" + page).get()
            .addHeader("authorization", "Bearer " + this.auth.getToken())
            .addHeader("content-type", "application/json").build();
    Response response = httpClient.newCall(request).execute();
    int responseCode = response.code();
    if (responseCode == 404) {
      throw new RouteeContactsException(response.body().string());
    }
    JSONObject result = new JSONObject(response.body().string());
    RetrieveContactsResponse responseContacts = new RetrieveContactsResponse();
    responseContacts.setFirst(result.getBoolean("first"));
    responseContacts.setLast(result.getBoolean("last"));
    responseContacts.setNumber(result.getInt("number"));
    responseContacts.setNumberOfElements(result.getInt("numberOfElements"));
    responseContacts.setSize(result.getInt("size"));
    responseContacts.setTotalPages(result.getInt("totalPages"));
    if (result.has("content")) {
      JSONArray contactsArray = result.getJSONArray("content");
      for (int i = 0; i < contactsArray.length(); i++) {
        JSONObject contactJSON = contactsArray.getJSONObject(i);
        Contact resultContact = new Contact();
        resultContact.setContactId(contactJSON.getString("id"));
        resultContact.setVip(contactJSON.getBoolean("vip"));
        resultContact.setLastName(contactJSON.getString("lastName"));
        resultContact.setFirstName(contactJSON.getString("firstName"));
        resultContact.setEmail(contactJSON.getString("email"));
        resultContact.setMobile(contactJSON.getString("mobile"));
        resultContact.setCountry(contactJSON.getString("country"));
        if (contactJSON.has("labels")) {
          JSONArray labelsArray = contactJSON.getJSONArray("labels");
          for (int j = 0; j < labelsArray.length(); j++) {
            JSONObject labelJson = labelsArray.getJSONObject(j);
            Label label = new Label();
            label.setName(labelJson.getString("name"));
            label.setValue(labelJson.getString("value"));
            label.setType(labelJson.getString("type"));
            resultContact.addLabel(label);
          }
        }
        JSONArray blacklistedServicesArray = contactJSON.getJSONArray("blacklistedServices");
        for (int j = 0; j < blacklistedServicesArray.length(); j++) {
          String service = blacklistedServicesArray.getString(j);
          resultContact.addBlacklistedService(service);
        }
        JSONArray groupsArray = contactJSON.getJSONArray("groups");
        for (int j = 0; j < groupsArray.length(); j++) {
          Group group = new Group();
          group.setName(groupsArray.getString(j));
          resultContact.addGroup(group);
        }
        responseContacts.addContact(resultContact);
      }
    }
    return responseContacts;
  }

  /**
   * Retrieve all contacts.
   *
   * @param page the page
   * @param size the size
   * @return the retrieve contacts response
   * @throws RouteeAuthenticationException the routee authentication exception
   * @throws RouteeContactsException the routee contacts exception
   * @throws IOException Signals that an I/O exception has occurred.
   */
  public RetrieveContactsResponse retrieveAllContacts(int page, int size)
      throws RouteeAuthenticationException, RouteeContactsException, IOException {
    if (this.httpClient == null)
      this.httpClient = new OkHttpClient();
    Request request = new Request.Builder()
        .url(DEFAULT_BASE_URL + ENDPOINT_CONTACTS + "? page=" + page + "&size=" + size).get()
        .addHeader("authorization", "Bearer " + this.auth.getToken())
        .addHeader("content-type", "application/json").build();
    Response response = httpClient.newCall(request).execute();
    int responseCode = response.code();
    if (responseCode == 404) {
      throw new RouteeContactsException(response.body().string());
    }
    JSONObject result = new JSONObject(response.body().string());
    RetrieveContactsResponse responseContacts = new RetrieveContactsResponse();
    responseContacts.setFirst(result.getBoolean("first"));
    responseContacts.setLast(result.getBoolean("last"));
    responseContacts.setNumber(result.getInt("number"));
    responseContacts.setNumberOfElements(result.getInt("numberOfElements"));
    responseContacts.setSize(result.getInt("size"));
    responseContacts.setTotalPages(result.getInt("totalPages"));
    if (result.has("content")) {
      JSONArray contactsArray = result.getJSONArray("content");
      for (int i = 0; i < contactsArray.length(); i++) {
        JSONObject contactJSON = contactsArray.getJSONObject(i);
        Contact resultContact = new Contact();
        resultContact.setContactId(contactJSON.getString("id"));
        resultContact.setVip(contactJSON.getBoolean("vip"));
        resultContact.setLastName(contactJSON.getString("lastName"));
        resultContact.setFirstName(contactJSON.getString("firstName"));
        resultContact.setEmail(contactJSON.getString("email"));
        resultContact.setMobile(contactJSON.getString("mobile"));
        resultContact.setCountry(contactJSON.getString("country"));
        if (contactJSON.has("labels")) {
          JSONArray labelsArray = contactJSON.getJSONArray("labels");
          for (int j = 0; j < labelsArray.length(); j++) {
            JSONObject labelJson = labelsArray.getJSONObject(j);
            Label label = new Label();
            label.setName(labelJson.getString("name"));
            label.setValue(labelJson.getString("value"));
            label.setType(labelJson.getString("type"));
            resultContact.addLabel(label);
          }
        }
        JSONArray blacklistedServicesArray = contactJSON.getJSONArray("blacklistedServices");
        for (int j = 0; j < blacklistedServicesArray.length(); j++) {
          String service = blacklistedServicesArray.getString(j);
          resultContact.addBlacklistedService(service);
        }
        JSONArray groupsArray = contactJSON.getJSONArray("groups");
        for (int j = 0; j < groupsArray.length(); j++) {
          Group group = new Group();
          group.setName(groupsArray.getString(j));
          resultContact.addGroup(group);
        }
        responseContacts.addContact(resultContact);
      }
    }
    return responseContacts;
  }

  /**
   * Retrieve contact.
   *
   * @param id the id
   * @return the contact
   * @throws RouteeAuthenticationException the routee authentication exception
   * @throws IOException Signals that an I/O exception has occurred.
   * @throws RouteeContactsException the routee contacts exception
   */
  public Contact retrieveContact(String id)
      throws RouteeAuthenticationException, IOException, RouteeContactsException {

    if (this.httpClient == null)
      this.httpClient = new OkHttpClient();
    Request request = new Request.Builder().url(DEFAULT_BASE_URL + ENDPOINT_CONTACTS + "/" + id)
        .get().addHeader("authorization", "Bearer " + this.auth.getToken())
        .addHeader("content-type", "application/json").build();
    Response response = httpClient.newCall(request).execute();
    int responseCode = response.code();
    if (responseCode == 404) {
      throw new RouteeContactsException(response.body().string());
    }
    JSONObject result = new JSONObject(response.body().string());
    Contact resultContact = new Contact();
    resultContact.setContactId(result.getString("id"));
    resultContact.setVip(result.getBoolean("vip"));
    resultContact.setLastName(result.getString("lastName"));
    resultContact.setFirstName(result.getString("firstName"));
    resultContact.setEmail(result.getString("email"));
    resultContact.setMobile(result.getString("mobile"));
    resultContact.setCountry(result.getString("country"));
    if (result.has("labels")) {
      JSONArray labelsArray = result.getJSONArray("labels");
      for (int i = 0; i < labelsArray.length(); i++) {
        JSONObject labelJson = labelsArray.getJSONObject(i);
        Label label = new Label();
        label.setName(labelJson.getString("name"));
        label.setValue(labelJson.getString("value"));
        if (labelJson.has("type")) {
          label.setType(labelJson.getString("type"));
        }
        resultContact.addLabel(label);
      }
    }
    JSONArray blacklistedServicesArray = result.getJSONArray("blacklistedServices");
    for (int i = 0; i < blacklistedServicesArray.length(); i++) {
      String service = blacklistedServicesArray.getString(i);
      resultContact.addBlacklistedService(service);
    }
    JSONArray groupsArray = result.getJSONArray("groups");
    for (int i = 0; i < groupsArray.length(); i++) {
      Group group = new Group();
      group.setName(groupsArray.getString(i));
      resultContact.addGroup(group);
    }
    return resultContact;

  }

  /**
   * Update contact.
   *
   * @param contact the contact
   * @return the contact
   * @throws RouteeAuthenticationException the routee authentication exception
   * @throws IOException Signals that an I/O exception has occurred.
   * @throws RouteeContactsException the routee contacts exception
   */
  public Contact updateContact(Contact contact)
      throws RouteeAuthenticationException, IOException, RouteeContactsException {

    if (this.httpClient == null)
      this.httpClient = new OkHttpClient();
    MediaType mediaType = MediaType.parse("application/json");
    RequestBody body = null;
    JSONObject jsonBody = new JSONObject();
    ArrayList<Label> labels = contact.getLabels();
    if (labels != null) {
      for (int i = 0; i < labels.size(); i++) {
        Label label = labels.get(i);
        JSONObject jsonLabel = new JSONObject();
        jsonLabel.put("name", label.getName());
        jsonLabel.put("value", label.getValue());
        jsonBody.append("labels", jsonLabel);
      }
    }
    jsonBody.put("email", contact.getEmail());
    jsonBody.put("firstName", contact.getFirstName());
    jsonBody.put("lastName", contact.getLastName());
    jsonBody.put("mobile", contact.getMobile());
    jsonBody.put("vip", contact.isVip());
    body = RequestBody.create(mediaType, jsonBody.toString());
    Request request = new Request.Builder()
        .url(DEFAULT_BASE_URL + ENDPOINT_CONTACTS + "/" + contact.getContactId()).put(body)
        .addHeader("authorization", "Bearer " + this.auth.getToken())
        .addHeader("content-type", "application/json").build();
    Response response = httpClient.newCall(request).execute();
    int responseCode = response.code();
    if (responseCode == 400 || responseCode == 404 || responseCode == 409) {
      throw new RouteeContactsException(response.body().string());
    }
    JSONObject result = new JSONObject(response.body().string());
    Contact resultContact = new Contact();
    resultContact.setContactId(result.getString("id"));
    resultContact.setVip(result.getBoolean("vip"));
    resultContact.setLastName(result.getString("lastName"));
    resultContact.setFirstName(result.getString("firstName"));
    resultContact.setEmail(result.getString("email"));
    resultContact.setMobile(result.getString("mobile"));
    resultContact.setCountry(result.getString("country"));
    if (result.has("labels")) {
      JSONArray labelsArray = result.getJSONArray("labels");
      for (int i = 0; i < labelsArray.length(); i++) {
        JSONObject labelJson = labelsArray.getJSONObject(i);
        Label label = new Label();
        label.setName(labelJson.getString("name"));
        label.setValue(labelJson.getString("value"));
        label.setType(labelJson.getString("type"));
        resultContact.addLabel(label);
      }
    }
    if (result.has("blacklistedServices")) {
      JSONArray blacklistedServicesArray = result.getJSONArray("blacklistedServices");
      for (int i = 0; i < blacklistedServicesArray.length(); i++) {
        String service = blacklistedServicesArray.getString(i);
        resultContact.addBlacklistedService(service);
      }
    }
    JSONArray groupsArray = result.getJSONArray("groups");
    for (int i = 0; i < groupsArray.length(); i++) {
      Group group = new Group();
      group.setName(groupsArray.getString(i));
      resultContact.addGroup(group);
    }
    return resultContact;
  }

  /**
   * Delete contact.
   *
   * @param id the id
   * @return the contact
   * @throws RouteeAuthenticationException the routee authentication exception
   * @throws IOException Signals that an I/O exception has occurred.
   * @throws RouteeContactsException the routee contacts exception
   */
  public Contact deleteContact(String id)
      throws RouteeAuthenticationException, IOException, RouteeContactsException {

    if (this.httpClient == null)
      this.httpClient = new OkHttpClient();

    Request request = new Request.Builder().url(DEFAULT_BASE_URL + ENDPOINT_CONTACTS + "/" + id)
        .delete().addHeader("authorization", "Bearer " + this.auth.getToken())
        .addHeader("content-type", "application/json").build();
    Response response = httpClient.newCall(request).execute();
    int responseCode = response.code();
    if (responseCode == 404 || responseCode == 500) {
      throw new RouteeContactsException(response.body().string());
    }
    JSONObject result = new JSONObject(response.body().string());
    Contact resultContact = new Contact();
    resultContact.setContactId(result.getString("id"));
    resultContact.setVip(result.getBoolean("vip"));
    resultContact.setLastName(result.getString("lastName"));
    resultContact.setFirstName(result.getString("firstName"));
    resultContact.setEmail(result.getString("email"));
    resultContact.setMobile(result.getString("mobile"));
    resultContact.setCountry(result.getString("country"));
    if (result.has("labels")) {
      JSONArray labelsArray = result.getJSONArray("labels");
      for (int i = 0; i < labelsArray.length(); i++) {
        JSONObject labelJson = labelsArray.getJSONObject(i);
        Label label = new Label();
        label.setName(labelJson.getString("name"));
        label.setValue(labelJson.getString("value"));
        if (labelJson.has("type")) {
          label.setType(labelJson.getString("type"));
        }
        resultContact.addLabel(label);
      }
    }
    JSONArray blacklistedServicesArray = result.getJSONArray("blacklistedServices");
    for (int i = 0; i < blacklistedServicesArray.length(); i++) {
      String service = blacklistedServicesArray.getString(i);
      resultContact.addBlacklistedService(service);
    }
    JSONArray groupsArray = result.getJSONArray("groups");
    for (int i = 0; i < groupsArray.length(); i++) {
      Group group = new Group();
      group.setName(groupsArray.getString(i));
      resultContact.addGroup(group);
    }
    return resultContact;

  }

  /**
   * Contact exists.
   *
   * @param mobileNumber the mobile number
   * @return true, if successful
   * @throws IOException Signals that an I/O exception has occurred.
   * @throws RouteeAuthenticationException the routee authentication exception
   * @throws RouteeContactsException the routee contacts exception
   */
  public boolean contactExists(String mobileNumber)
      throws IOException, RouteeAuthenticationException, RouteeContactsException {

    if (this.httpClient == null)
      this.httpClient = new OkHttpClient();

    Request request = new Request.Builder()
        .url(DEFAULT_BASE_URL + ENDPOINT_CONTACTS + "/mobile?value=" + mobileNumber).head()
        .addHeader("authorization", "Bearer " + this.auth.getToken())
        .addHeader("content-type", "application/json").build();
    Response response = httpClient.newCall(request).execute();
    int responseCode = response.code();
    if (responseCode == 200) {
      return true;
    } else if (responseCode == 404) {
      return false;
    } else {
      throw new RouteeContactsException(response.body().string());

    }
  }

  /**
   * Adds the contacts to black list.
   *
   * @param service the service
   * @param contactIds the contact ids
   * @return the int
   * @throws RouteeAuthenticationException the routee authentication exception
   * @throws IOException Signals that an I/O exception has occurred.
   * @throws RouteeContactsException the routee contacts exception
   */
  public int addContactsToBlackList(Service service, ArrayList<String> contactIds)
      throws RouteeAuthenticationException, IOException, RouteeContactsException {


    if (this.httpClient == null)
      this.httpClient = new OkHttpClient();
    MediaType mediaType = MediaType.parse("application/json");
    JSONArray bodyArray = new JSONArray();
    for (int i = 0; i < contactIds.size(); i++) {
      bodyArray.put(contactIds.get(i));
    }
    RequestBody body = null;
    body = RequestBody.create(mediaType, bodyArray.toString());
    Request request =
        new Request.Builder().url(DEFAULT_BASE_URL + ENDPOINT_CONTACTS + "/blacklist/" + service)
            .post(body).addHeader("authorization", "Bearer " + this.auth.getToken())
            .addHeader("content-type", "application/json").build();
    Response response = httpClient.newCall(request).execute();
    int responseCode = response.code();
    if (responseCode != 200) {
      throw new RouteeContactsException(response.body().string());
    }
    JSONObject result = new JSONObject(response.body().string());
    return result.getInt("updated");
  }

  /**
   * Gets the black listed contacts for service.
   *
   * @param service the service
   * @return the black listed contacts for service
   * @throws RouteeAuthenticationException the routee authentication exception
   * @throws IOException Signals that an I/O exception has occurred.
   * @throws RouteeContactsException the routee contacts exception
   */
  public ArrayList<Contact> getBlackListedContactsForService(Service service)
      throws RouteeAuthenticationException, IOException, RouteeContactsException {
    if (this.httpClient == null)
      this.httpClient = new OkHttpClient();
    Request request =
        new Request.Builder().url(DEFAULT_BASE_URL + ENDPOINT_CONTACTS + "/blacklist/" + service)
            .get().addHeader("authorization", "Bearer " + this.auth.getToken())
            .addHeader("content-type", "application/json").build();
    Response response = httpClient.newCall(request).execute();
    int responseCode = response.code();
    if (responseCode == 404) {
      throw new RouteeContactsException(response.body().string());
    }
    JSONArray contactsArray = new JSONArray(response.body().string());
    ArrayList<Contact> contacts = new ArrayList<Contact>();
    for (int i = 0; i < contactsArray.length(); i++) {
      JSONObject contactJSON = contactsArray.getJSONObject(i);
      Contact resultContact = new Contact();
      resultContact.setContactId(contactJSON.getString("id"));
      resultContact.setVip(contactJSON.getBoolean("vip"));
      resultContact.setLastName(contactJSON.getString("lastName"));
      resultContact.setFirstName(contactJSON.getString("firstName"));
      resultContact.setEmail(contactJSON.getString("email"));
      resultContact.setMobile(contactJSON.getString("mobile"));
      resultContact.setCountry(contactJSON.getString("country"));
      if (contactJSON.has("labels")) {
        JSONArray labelsArray = contactJSON.getJSONArray("labels");
        for (int j = 0; j < labelsArray.length(); j++) {
          JSONObject labelJson = labelsArray.getJSONObject(j);
          Label label = new Label();
          label.setName(labelJson.getString("name"));
          label.setValue(labelJson.getString("value"));
          if (labelJson.has("type")) {
            label.setType(labelJson.getString("type"));
          }
          resultContact.addLabel(label);
        }
      }
      JSONArray blacklistedServicesArray = contactJSON.getJSONArray("blacklistedServices");
      for (int j = 0; j < blacklistedServicesArray.length(); j++) {
        String serv = blacklistedServicesArray.getString(j);
        resultContact.addBlacklistedService(serv);
      }
      JSONArray groupsArray = contactJSON.getJSONArray("groups");
      for (int j = 0; j < groupsArray.length(); j++) {
        Group group = new Group();
        group.setName(groupsArray.getString(j));
        resultContact.addGroup(group);
      }
      contacts.add(resultContact);
    }
    return contacts;

  }

  /**
   * Removes the group of contacts from black list.
   *
   * @param service the service
   * @param group the group
   * @return the int
   * @throws RouteeAuthenticationException the routee authentication exception
   * @throws IOException Signals that an I/O exception has occurred.
   * @throws RouteeContactsException the routee contacts exception
   */
  public int removeGroupOfContactsFromBlackList(Service service, String group)
      throws RouteeAuthenticationException, IOException, RouteeContactsException {
    if (this.httpClient == null)
      this.httpClient = new OkHttpClient();
    JSONArray bodyArray = new JSONArray();
    bodyArray.put(group);
    MediaType mediaType = MediaType.parse("application/json");
    RequestBody body = null;
    body = RequestBody.create(mediaType, bodyArray.toString());
    Request request = new Request.Builder()
        .url(DEFAULT_BASE_URL + ENDPOINT_CONTACTS + "/blacklist/" + service + "/groups").post(body)
        .addHeader("authorization", "Bearer " + this.auth.getToken())
        .addHeader("content-type", "application/json").build();
    Response response = httpClient.newCall(request).execute();
    int responseCode = response.code();
    if (responseCode == 404) {
      throw new RouteeContactsException(response.body().string());
    }
    JSONObject result = new JSONObject(response.body().string());
    return result.getInt("updated");
  }

  /**
   * Retrieve account contact labels.
   *
   * @return the JSON object
   * @throws RouteeAuthenticationException the routee authentication exception
   * @throws IOException Signals that an I/O exception has occurred.
   * @throws RouteeContactsException the routee contacts exception
   */
  public JSONObject retrieveAccountContactLabels()
      throws RouteeAuthenticationException, IOException, RouteeContactsException {
    if (this.httpClient == null)
      this.httpClient = new OkHttpClient();
    Request request = new Request.Builder().url(DEFAULT_BASE_URL + "/contacts/labels/my").get()
        .addHeader("authorization", "Bearer " + this.auth.getToken())
        .addHeader("content-type", "application/json").build();
    Response response = httpClient.newCall(request).execute();
    if (response.code() == 404) {
      throw new RouteeContactsException(response.body().string());
    }
    JSONObject responseJson = new JSONObject(response.body().string());
    return responseJson;
  }

  /**
   * Creates the labels.
   *
   * @param labels the labels
   * @return the array list
   * @throws RouteeAuthenticationException the routee authentication exception
   * @throws IOException Signals that an I/O exception has occurred.
   * @throws RouteeContactsException the routee contacts exception
   */
  public ArrayList<Label> createLabels(ArrayList<Label> labels)
      throws RouteeAuthenticationException, IOException, RouteeContactsException {
    if (this.httpClient == null)
      this.httpClient = new OkHttpClient();
    JSONArray bodyArray = new JSONArray();
    for (int i = 0; i < labels.size(); i++) {
      JSONObject labelJson = new JSONObject();
      Label l = labels.get(i);
      labelJson.put("name", l.getName());
      labelJson.put("type", l.getType());
      bodyArray.put(labelJson);
    }
    MediaType mediaType = MediaType.parse("application/json");
    RequestBody body = null;
    body = RequestBody.create(mediaType, bodyArray.toString());
    Request request = new Request.Builder().url(DEFAULT_BASE_URL + "/contacts/labels/my").post(body)
        .addHeader("authorization", "Bearer " + this.auth.getToken())
        .addHeader("content-type", "application/json").build();
    Response response = httpClient.newCall(request).execute();
    if (response.code() == 404 || response.code() == 409 || response.code() != 200) {
      throw new RouteeContactsException(response.body().string());
    }
    JSONArray responseArray = new JSONArray(response.body().string());
    ArrayList<Label> responseLabels = new ArrayList<Label>();
    for (int i = 0; i < responseArray.length(); i++) {
      JSONObject jsonLabel = responseArray.getJSONObject(i);
      Label l = new Label();
      l.setName(jsonLabel.getString("name"));
      l.setType(jsonLabel.getString("type"));
      responseLabels.add(l);
    }
    return responseLabels;
  }

  /**
   * Retrieve account groups.
   *
   * @return the array list
   * @throws RouteeAuthenticationException the routee authentication exception
   * @throws IOException Signals that an I/O exception has occurred.
   * @throws RouteeContactsException the routee contacts exception
   */
  public ArrayList<Group> retrieveAccountGroups()
      throws RouteeAuthenticationException, IOException, RouteeContactsException {
    if (this.httpClient == null)
      this.httpClient = new OkHttpClient();

    Request request = new Request.Builder().url(DEFAULT_BASE_URL + ENDPOINT_GROUPS).get()
        .addHeader("authorization", "Bearer " + this.auth.getToken())
        .addHeader("content-type", "application/json").build();
    Response response = httpClient.newCall(request).execute();
    int responseCode = response.code();
    if (responseCode == 404) {
      throw new RouteeContactsException(response.body().string());
    }
    JSONArray jsonResponse = new JSONArray(response.body().string());
    ArrayList<Group> groups = new ArrayList<Group>();
    for (int i = 0; i < jsonResponse.length(); i++) {
      Group g = new Group();
      g.setName(jsonResponse.getJSONObject(i).getString("name"));
      groups.add(g);
    }
    return groups;
  }


  /**
   * Retrieve account group.
   *
   * @param groupName the group name
   * @return the group
   * @throws RouteeAuthenticationException the routee authentication exception
   * @throws IOException Signals that an I/O exception has occurred.
   * @throws RouteeContactsException the routee contacts exception
   */
  public Group retrieveAccountGroup(String groupName)
      throws RouteeAuthenticationException, IOException, RouteeContactsException {
    if (this.httpClient == null)
      this.httpClient = new OkHttpClient();

    Request request =
        new Request.Builder().url(DEFAULT_BASE_URL + ENDPOINT_GROUPS + "/" + groupName).get()
            .addHeader("authorization", "Bearer " + this.auth.getToken())
            .addHeader("content-type", "application/json").build();
    Response response = httpClient.newCall(request).execute();
    int responseCode = response.code();
    if (responseCode == 404) {
      throw new RouteeContactsException(response.body().string());
    }
    JSONObject object = new JSONObject(response.body().string());
    Group group = new Group();
    group.setName(object.getString("name"));
    group.setSize(object.getInt("size"));
    return group;
  }

  /**
   * Retrieve account groups paged.
   *
   * @return the retrieve groups paged response
   * @throws RouteeAuthenticationException the routee authentication exception
   * @throws IOException Signals that an I/O exception has occurred.
   * @throws RouteeContactsException the routee contacts exception
   */
  // TODO Make Variations for Query Parameters
  public RetrieveGroupsPagedResponse retrieveAccountGroupsPaged()
      throws RouteeAuthenticationException, IOException, RouteeContactsException {
    if (this.httpClient == null) {

      this.httpClient = new OkHttpClient();

    }
    Request request = new Request.Builder().url(DEFAULT_BASE_URL + ENDPOINT_GROUPS + "/page").get()
        .addHeader("authorization", "Bearer " + this.auth.getToken())
        .addHeader("content-type", "application/json").build();
    Response response = httpClient.newCall(request).execute();
    int responseCode = response.code();
    if (responseCode == 404) {
      throw new RouteeContactsException(response.body().string());
    }
    JSONObject result = new JSONObject(response.body().string());
    RetrieveGroupsPagedResponse responseObject = new RetrieveGroupsPagedResponse();
    responseObject.setFirst(result.getBoolean("first"));
    responseObject.setLast(result.getBoolean("last"));
    responseObject.setNumber(result.getInt("number"));
    responseObject.setNumberOfElements(result.getInt("numberOfElements"));
    responseObject.setSize(result.getInt("size"));
    responseObject.setTotalElements(result.getInt("totalElements"));
    responseObject.setTotalPages(result.getInt("totalPages"));
    if (result.has("content")) {
      JSONArray array = result.getJSONArray("content");
      for (int i = 0; i < array.length(); i++) {
        JSONObject obj = array.getJSONObject(i);
        Group g = new Group();
        g.setName(obj.getString("name"));
        g.setSize(obj.getInt("size"));
        responseObject.addGroup(g);

      }
    }
    return responseObject;
  }

  /**
   * Creates the group.
   *
   * @param group the group
   * @return the group
   * @throws RouteeAuthenticationException the routee authentication exception
   * @throws IOException Signals that an I/O exception has occurred.
   * @throws RouteeContactsException the routee contacts exception
   */
  public Group createGroup(Group group)
      throws RouteeAuthenticationException, IOException, RouteeContactsException {
    if (this.httpClient == null)
      this.httpClient = new OkHttpClient();
    MediaType mediaType = MediaType.parse("application/json");
    RequestBody body = null;
    JSONObject jsonBody = new JSONObject();
    jsonBody.put("name", group.getName());
    if (group.getStrategy() != null) {
      jsonBody.put("strategy", group.getStrategy());
    }
    if (group.getFilters() != null) {
      ArrayList<Filter> filters = group.getFilters();
      JSONArray jsonArray = new JSONArray();
      for (int i = 0; i < filters.size(); i++) {
        JSONObject obj = new JSONObject();
        obj.put("fieldName", filters.get(i).getFieldName());
        obj.put("searchTerm", filters.get(i).getSearchTerm());
      }
      jsonBody.put("filters", jsonArray);
    }

    body = RequestBody.create(mediaType, jsonBody.toString());
    Request request = new Request.Builder().url(DEFAULT_BASE_URL + ENDPOINT_GROUPS).post(body)
        .addHeader("authorization", "Bearer " + this.auth.getToken())
        .addHeader("content-type", "application/json").build();
    Response response = httpClient.newCall(request).execute();
    if (response.code() == 400 || response.code() == 404 || response.code() == 409) {
      throw new RouteeContactsException(response.body().string());
    }
    JSONObject responseObject = new JSONObject(response.body().string());
    Group responseGroup = new Group();
    responseGroup.setName(responseObject.getString("name"));
    responseGroup.setSize(responseObject.getInt("size"));
    return responseGroup;
  }

  /**
   * Delete groups.
   *
   * @param Groups the groups
   * @param deletedContacts the deleted contacts
   * @return the array list
   * @throws RouteeAuthenticationException the routee authentication exception
   * @throws IOException Signals that an I/O exception has occurred.
   * @throws RouteeContactsException the routee contacts exception
   */
  public ArrayList<DeleteGroupsResponse> deleteGroups(ArrayList<String> Groups,
      boolean deletedContacts)
      throws RouteeAuthenticationException, IOException, RouteeContactsException {
    if (this.httpClient == null)
      this.httpClient = new OkHttpClient();
    JSONArray jsonBody = new JSONArray();
    for (int i = 0; i < Groups.size(); i++) {
      jsonBody.put(Groups.get(i));
    }
    MediaType mediaType = MediaType.parse("application/json");
    RequestBody body = null;
    body = RequestBody.create(mediaType, jsonBody.toString());
    Request request = null;
    if (deletedContacts) {
      request = new Request.Builder()
          .url(DEFAULT_BASE_URL + ENDPOINT_GROUPS + "?deleteContacts=" + deletedContacts)
          .delete(body).addHeader("authorization", "Bearer " + this.auth.getToken())
          .addHeader("content-type", "application/json").build();
    } else {
      request = new Request.Builder().url(DEFAULT_BASE_URL + ENDPOINT_GROUPS).delete(body)
          .addHeader("authorization", "Bearer " + this.auth.getToken())
          .addHeader("content-type", "application/json").build();
    }
    Response response = httpClient.newCall(request).execute();
    if (response.code() == 404) {
      throw new RouteeContactsException(response.body().string());
    }
    JSONArray array = new JSONArray(response.body().string());
    ArrayList<DeleteGroupsResponse> responseArray = new ArrayList<DeleteGroupsResponse>();
    for (int i = 0; i < array.length(); i++) {
      JSONObject jsonGroup = array.getJSONObject(i);
      DeleteGroupsResponse responseGroup = new DeleteGroupsResponse();
      responseGroup.setName(jsonGroup.getString("name"));
      responseGroup.setDeletedContacts(jsonGroup.getBoolean("deletedContacts"));
      responseArray.add(responseGroup);

    }
    return responseArray;
  }

  /**
   * Merge multiple groups.
   *
   * @param name the name
   * @param groups the groups
   * @return the group
   * @throws RouteeAuthenticationException the routee authentication exception
   * @throws IOException Signals that an I/O exception has occurred.
   * @throws RouteeContactsException the routee contacts exception
   */
  public Group mergeMultipleGroups(String name, ArrayList<String> groups)
      throws RouteeAuthenticationException, IOException, RouteeContactsException {
    if (this.httpClient == null)
      this.httpClient = new OkHttpClient();
    JSONObject jsonBody = new JSONObject();
    jsonBody.put("name", name);
    JSONArray jsonArray = new JSONArray();
    for (int i = 0; i < groups.size(); i++) {
      jsonArray.put(groups.get(i));
    }
    jsonBody.put("groups", jsonArray);
    MediaType mediaType = MediaType.parse("application/json");
    RequestBody body = null;
    body = RequestBody.create(mediaType, jsonBody.toString());
    Request request = null;
    request = new Request.Builder().url(DEFAULT_BASE_URL + ENDPOINT_GROUPS + "/merge").post(body)
        .addHeader("authorization", "Bearer " + this.auth.getToken())
        .addHeader("content-type", "application/json").build();
    Response response = httpClient.newCall(request).execute();
    if (response.code() == 404 || response.code() == 409) {
      throw new RouteeContactsException(response.body().string());
    }
    JSONObject jsonResponse = new JSONObject(response.body().string());
    Group groupResponse = new Group();
    groupResponse.setName(jsonResponse.getString("name"));
    groupResponse.setSize(jsonResponse.getInt("size"));
    return groupResponse;
  }

  /**
   * Creates the group from difference.
   *
   * @param name the name
   * @param groups the groups
   * @return the group
   * @throws RouteeAuthenticationException the routee authentication exception
   * @throws IOException Signals that an I/O exception has occurred.
   * @throws RouteeContactsException the routee contacts exception
   */
  public Group createGroupFromDifference(String name, ArrayList<String> groups)
      throws RouteeAuthenticationException, IOException, RouteeContactsException {
    if (this.httpClient == null)
      this.httpClient = new OkHttpClient();
    JSONObject jsonBody = new JSONObject();
    jsonBody.put("name", name);
    JSONArray jsonArray = new JSONArray();
    for (int i = 0; i < groups.size(); i++) {
      jsonArray.put(groups.get(i));
    }
    jsonBody.put("groups", jsonArray);
    MediaType mediaType = MediaType.parse("application/json");
    RequestBody body = null;
    body = RequestBody.create(mediaType, jsonBody.toString());
    Request request = null;
    request = new Request.Builder().url(DEFAULT_BASE_URL + ENDPOINT_GROUPS + "/difference")
        .post(body).addHeader("authorization", "Bearer " + this.auth.getToken())
        .addHeader("content-type", "application/json").build();
    Response response = httpClient.newCall(request).execute();
    if (response.code() == 404 || response.code() == 409) {
      throw new RouteeContactsException(response.body().string());
    }
    JSONObject jsonResponse = new JSONObject(response.body().string());
    Group groupResponse = new Group();
    groupResponse.setName(jsonResponse.getString("name"));
    groupResponse.setSize(jsonResponse.getInt("size"));
    return groupResponse;
  }



  /**
   * Delete contacts of group.
   *
   * @param groupName the group name
   * @param contacts the contacts
   * @return the group
   * @throws RouteeAuthenticationException the routee authentication exception
   * @throws IOException Signals that an I/O exception has occurred.
   * @throws RouteeContactsException the routee contacts exception
   */
  public Group deleteContactsOfGroup(String groupName, ArrayList<String> contacts)
      throws RouteeAuthenticationException, IOException, RouteeContactsException {
    if (this.httpClient == null)
      this.httpClient = new OkHttpClient();
    JSONArray jsonArray = new JSONArray();
    for (int i = 0; i < contacts.size(); i++) {
      jsonArray.put(contacts.get(i));
    }
    MediaType mediaType = MediaType.parse("application/json");
    RequestBody body = null;
    body = RequestBody.create(mediaType, jsonArray.toString());
    Request request = null;
    request = new Request.Builder()
        .url(DEFAULT_BASE_URL + ENDPOINT_GROUPS + "/" + groupName + "/contacts").delete(body)
        .addHeader("authorization", "Bearer " + this.auth.getToken())
        .addHeader("content-type", "application/json").build();
    Response response = httpClient.newCall(request).execute();
    if (response.code() == 400 || response.code() == 404) {
      throw new RouteeContactsException(response.body().string());
    }
    JSONObject jsonResponse = new JSONObject(response.body().string());
    Group groupResponse = new Group();
    groupResponse.setName(jsonResponse.getString("name"));
    groupResponse.setSize(jsonResponse.getInt("size"));
    return groupResponse;
  }


  /**
   * Adds the contacts to group.
   *
   * @param groupName the group name
   * @param contacts the contacts
   * @return the group
   * @throws RouteeAuthenticationException the routee authentication exception
   * @throws IOException Signals that an I/O exception has occurred.
   * @throws RouteeContactsException the routee contacts exception
   */
  public Group addContactsToGroup(String groupName, ArrayList<String> contacts)
      throws RouteeAuthenticationException, IOException, RouteeContactsException {
    if (this.httpClient == null)
      this.httpClient = new OkHttpClient();
    JSONArray jsonArray = new JSONArray();
    for (int i = 0; i < contacts.size(); i++) {
      jsonArray.put(contacts.get(i));
    }
    MediaType mediaType = MediaType.parse("application/json");
    RequestBody body = null;
    body = RequestBody.create(mediaType, jsonArray.toString());
    Request request = null;
    request = new Request.Builder()
        .url(DEFAULT_BASE_URL + ENDPOINT_GROUPS + "/" + groupName + "/contacts").post(body)
        .addHeader("authorization", "Bearer " + this.auth.getToken())
        .addHeader("content-type", "application/json").build();
    Response response = httpClient.newCall(request).execute();
    if (response.code() == 400 || response.code() == 404) {
      throw new RouteeContactsException(response.body().string());
    }
    JSONObject jsonResponse = new JSONObject(response.body().string());
    Group groupResponse = new Group();
    groupResponse.setName(jsonResponse.getString("name"));
    groupResponse.setSize(jsonResponse.getInt("size"));
    return groupResponse;
  }

  /**
   * Removes the contacts from black list.
   *
   * @param service the service
   * @param contacts the contacts
   * @return the int
   * @throws RouteeAuthenticationException the routee authentication exception
   * @throws IOException Signals that an I/O exception has occurred.
   * @throws RouteeContactsException the routee contacts exception
   */
  public int removeContactsFromBlackList(Service service, ArrayList<String> contacts)
      throws RouteeAuthenticationException, IOException, RouteeContactsException {
    if (this.httpClient == null)
      this.httpClient = new OkHttpClient();
    JSONArray jsonArray = new JSONArray();
    for (int i = 0; i < contacts.size(); i++) {
      JSONObject jsonObject = new JSONObject();
      jsonObject.put("id", contacts.get(i));
      jsonArray.put(jsonObject);
    }
    MediaType mediaType = MediaType.parse("application/json");
    RequestBody body = null;
    body = RequestBody.create(mediaType, jsonArray.toString());
    Request request = null;
    request =
        new Request.Builder().url(DEFAULT_BASE_URL + ENDPOINT_CONTACTS + "/blacklist/" + service)
            .delete(body).addHeader("authorization", "Bearer " + this.auth.getToken())
            .addHeader("content-type", "application/json").build();
    Response response = httpClient.newCall(request).execute();
    if (response.code() == 404) {
      throw new RouteeContactsException(response.body().string());
    }
    JSONObject jsonResponse = new JSONObject(response.body().string());
    return jsonResponse.getInt("updated");
  }

}
