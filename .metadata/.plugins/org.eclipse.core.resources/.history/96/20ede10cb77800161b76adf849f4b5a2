package net.routee.messaging;

import java.io.IOException;
import java.util.ArrayList;

import org.json.JSONArray;
import org.json.JSONObject;

import net.routee.authentication.RouteeAuthentication;
import net.routee.authentication.RouteeAuthenticationException;
import net.routee.contacts.Contact;
import okhttp3.MediaType;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.RequestBody;
import okhttp3.Response;

public class RouteeMessagingClient {


  public static final String DEFAULT_BASE_URL = "https://connect.routee.net";
  public static final String ENDPOINT_SMS = "/sms";
  public static final String ENDPOINT_ANALYZESMS = "/sms/analyze";
  public static final String ENDPOINT_SENDCAMPAIGN = "/sms/campaign";
  public static final String ENDPOINT_ANALYZECAMPAIGN = "/sms/analyze/campaign";
  public static final String ENDPOINT_TRACKSMS = "/sms/tracking/single/";
  public static final String ENDPOINT_TRACKMULTIPLESMS = "/sms/tracking/campaign/";
  public static final String ENDPOINT_TRACKMULTIPLESMSFILTER = "/sms/tracking";
  public static final String ENDPOINT_RETCOUNTRIESQUIETHOURS = "/sms/quietHours/countries/";

  private RouteeAuthentication auth = null;
  private OkHttpClient httpClient = null;

  public RouteeMessagingClient(final String applicationId, final String applicationSecret) {
    this.auth = new RouteeAuthentication(applicationId, applicationSecret);
  }

  public RouteeMessagingClient(RouteeAuthentication auth) {
    this.auth = auth;
  }

  public SingleSmsResult sendSingleSms(Message message)
      throws RouteeAuthenticationException, RouteeMessagingException, IOException {
    if (this.httpClient == null)
      this.httpClient = new OkHttpClient();
    MediaType mediaType = MediaType.parse("application/json");
    RequestBody body = null;
    JSONObject jsonBody = new JSONObject();
    jsonBody.put("from", message.getFrom());
    jsonBody.put("body", message.getBody());
    jsonBody.put("to", message.getTo());
    if (message.isFlash()) {
      jsonBody.put("flash", true);
    }
    if (message.getLabel() != null) {
      jsonBody.put("label", message.getLabel());
    }
    if (message.getCallback() != null) {
      JSONObject callbackJson = new JSONObject();
      Callback callback = message.getCallback();
      callbackJson.put("url", callback.getCallbackUrl());
      callbackJson.put("strategy", callback.getCallbackStrategy());
      jsonBody.put("callback", callbackJson);
    }
    body = RequestBody.create(mediaType, jsonBody.toString());
    Request request = new Request.Builder().url(DEFAULT_BASE_URL + ENDPOINT_SMS).post(body)
        .addHeader("authorization", "Bearer " + this.auth.getToken())
        .addHeader("content-type", "application/json").build();
    Response response = httpClient.newCall(request).execute();
    int responseCode = response.code();
    if (responseCode == 400) {
      throw new RouteeMessagingException(response.body().string());
    }
    JSONObject result = new JSONObject(response.body().string());
    SingleSmsResult smsResult = new SingleSmsResult();
    smsResult.setTrackingId(result.getString("trackingId"));
    smsResult.setCreatedAt(result.getString("createdAt"));
    smsResult.setFrom(result.getString("from"));
    smsResult.setTo(result.getString("to"));
    smsResult.setBody(result.getString("body"));
    smsResult.setStatus(result.getString("status"));
    smsResult.setLabel(result.getString("label"));
    BodyAnalysis analysis = new BodyAnalysis();
    JSONObject bodyAnalysisJSON = result.getJSONObject("bodyAnalysis");
    analysis.setCharacters(bodyAnalysisJSON.getInt("characters"));
    analysis.setParts(bodyAnalysisJSON.getInt("parts"));
    if (bodyAnalysisJSON.has("transcode")) {
      Transcode transcode = new Transcode();
      JSONObject transcodeJson = bodyAnalysisJSON.getJSONObject("transcode");
      transcode.setParts(transcodeJson.getInt("parts"));
      transcode.setMessage(transcodeJson.getString("message"));
      analysis.setTranscode(transcode);
    }
    analysis.setUnicode(bodyAnalysisJSON.getBoolean("unicode"));
    smsResult.setAnalysis(analysis);
    smsResult.setFlash(result.getBoolean("flash"));
    if (result.has("callback")) {
      Callback callback = new Callback();
      JSONObject callbackObject = result.getJSONObject("callback");
      callback.setCallbackStrategy(callbackObject.getString("strategy"));
      callback.setCallbackUrl(callbackObject.getString("url"));
      smsResult.setCallback(callback);
    }
    return smsResult;
  }

  public SingleMessageAnalysisResult analyzeSingleMessage(Message message)
      throws RouteeAuthenticationException, RouteeMessagingException, IOException {
    if (this.httpClient == null)
      this.httpClient = new OkHttpClient();
    MediaType mediaType = MediaType.parse("application/json");
    RequestBody body = null;
    JSONObject jsonBody = new JSONObject();
    jsonBody.put("from", message.getFrom());
    jsonBody.put("body", message.getBody());
    jsonBody.put("to", message.getTo());
    body = RequestBody.create(mediaType, jsonBody.toString());
    Request request = new Request.Builder().url(DEFAULT_BASE_URL + ENDPOINT_ANALYZESMS).post(body)
        .addHeader("authorization", "Bearer " + this.auth.getToken())
        .addHeader("content-type", "application/json").build();
    Response response = httpClient.newCall(request).execute();
    int responseCode = response.code();
    if (responseCode == 404 || responseCode == 400) {
      throw new RouteeMessagingException(response.body().string());
    }
    JSONObject result = new JSONObject(response.body().string());
    BodyAnalysis analysis = new BodyAnalysis();
    JSONObject bodyAnalysisJSON = result.getJSONObject("bodyAnalysis");
    analysis.setCharacters(bodyAnalysisJSON.getInt("characters"));
    analysis.setParts(bodyAnalysisJSON.getInt("parts"));
    if (bodyAnalysisJSON.has("transcode")) {
      Transcode transcode = new Transcode();
      JSONObject transcodeJson = bodyAnalysisJSON.getJSONObject("transcode");
      transcode.setParts(transcodeJson.getInt("parts"));
      transcode.setMessage(transcodeJson.getString("message"));
      analysis.setTranscode(transcode);
    }
    analysis.setUnicode(bodyAnalysisJSON.getBoolean("unicode"));
    SingleMessageAnalysisResult singleMessageAnylaysis = new SingleMessageAnalysisResult();
    singleMessageAnylaysis.setAnalysis(analysis);
    singleMessageAnylaysis.setCost(result.getDouble("cost"));
    return singleMessageAnylaysis;
  }

  public SendCampaignResult sendCampaign(Campaign campaign)
      throws RouteeAuthenticationException, IOException, RouteeMessagingException {
    if (this.httpClient == null)
      this.httpClient = new OkHttpClient();
    MediaType mediaType = MediaType.parse("application/json");
    RequestBody body = null;
    JSONObject jsonBody = new JSONObject();
    jsonBody.put("from", campaign.getFrom());
    jsonBody.put("body", campaign.getBody());
    if (campaign.getCallback() != null) {
      JSONObject callbackJson = new JSONObject();
      Callback callback = campaign.getCallback();
      callbackJson.put("url", callback.getCallbackUrl());
      callbackJson.put("strategy", callback.getCallbackStrategy());
      jsonBody.put("callback", callbackJson);
    }
    if (campaign.getContacts() != null) {
      if (campaign.getContacts().size() > 0) {
        ArrayList<Contact> contacts = campaign.getContacts();
        JSONArray jsonContactsArray = new JSONArray();
        for (int i = 0; i < contacts.size(); i++) {
          jsonContactsArray.put(contacts.get(i).getContactId());
        }
        jsonBody.put("contacts", jsonContactsArray);
      }
    }

    if (campaign.getFallbackValues() != null) {
      if (campaign.getFallbackValues().size() > 0) {
        ArrayList<Fallback> fallbackValues = campaign.getFallbackValues();
        JSONObject fallbackValuesJson = new JSONObject();
        for (int i = 0; i < fallbackValues.size(); i++) {
          fallbackValuesJson.put(fallbackValues.get(i).getName(), fallbackValues.get(i).getValue());
        }
        jsonBody.put("fallbackValues", fallbackValues);
      }
    }
    if (campaign.isFlash()) {
      jsonBody.put("flash", true);
    }
    if (campaign.getGroups() != null) {
      if (campaign.getGroups().size() > 0) {
        JSONArray jsonGroupsArray = new JSONArray();
        for (int i = 0; i < campaign.getGroups().size(); i++) {
          jsonGroupsArray.put(campaign.getGroups().get(i));
        }
        jsonBody.put("groups", jsonGroupsArray);
      }
    }
    if (campaign.getTo() != null) {
      if (campaign.getTo().size() > 0) {
        JSONArray jsonToArray = new JSONArray();
        for (int i = 0; i < campaign.getTo().size(); i++) {
          jsonToArray.put(campaign.getTo().get(i));
        }
        jsonBody.put("to", jsonToArray);
      }
    }
    if (campaign.getCampaignName() != null) {
      jsonBody.put("campaignName", campaign.getCampaignName());
    }
    if (campaign.isRespectQuietHours()) {
      jsonBody.put("respectQuietHours", true);
    }
    if (campaign.getScheduledDate() != null) {
      jsonBody.put("scheduledDate", campaign.getScheduledDate());
    }
    if (campaign.getCampaignCallback() != null) {
      JSONObject callbackJson = new JSONObject();
      Callback callback = campaign.getCampaignCallback();
      callbackJson.put("url", callback.getCallbackUrl());
      callbackJson.put("strategy", callback.getCallbackStrategy());
      jsonBody.put("campaignCallback", callbackJson);
    }
    if (campaign.getReminder() != null) {
      Reminder reminder = campaign.getReminder();
      JSONObject jsonReminder = new JSONObject();
      if (reminder.getMinutesAfter() != 0) {
        jsonReminder.put("minutesAfter", reminder.getMinutesAfter());
      }
      if (reminder.getMinutesBefore() != 0) {
        jsonReminder.put("minutesBefore", reminder.getMinutesBefore());
      }
      ArrayList<String> contactsArray = reminder.getTo();
      JSONArray contactArrayJson = new JSONArray();
      for (int i = 0; i < contactsArray.size(); i++) {
        contactArrayJson.put(contactsArray.get(i));
      }
      jsonReminder.put("to", contactArrayJson);
      jsonBody.put("reminder", jsonReminder);
    }
    body = RequestBody.create(mediaType, jsonBody.toString());
    Request request = new Request.Builder().url(DEFAULT_BASE_URL + ENDPOINT_SENDCAMPAIGN).post(body)
        .addHeader("authorization", "Bearer " + this.auth.getToken())
        .addHeader("content-type", "application/json").build();
    Response response = httpClient.newCall(request).execute();
    int responseCode = response.code();
    if (responseCode != 200) {
      throw new RouteeMessagingException(response.body().string());
    }
    SendCampaignResult result = new SendCampaignResult();
    JSONObject jsonResult = new JSONObject(response.body().string());
    result.setTrackingId(jsonResult.getString("trackingId"));
    result.setType(jsonResult.getString("type"));
    result.setState(jsonResult.getString("state"));
    result.setCreatedAt(jsonResult.getString("createdAt"));
    result.setRespectQuietHours(jsonResult.getBoolean("respectQuietHours"));
    result.setFrom(jsonResult.getString("from"));
    if(jsonResult.has("to")){
      JSONArray array = jsonResult.getJSONArray("to");
      if(array.length()>0){
        for(int i=0;i<array.length();i++){
          result.addTo(array.getString(i));
        }
      }
    }
    result.setBody(jsonResult.getString("body"));
    if(jsonResult.has("smsAnalysis")){
      SmsAnalysis analysis = new SmsAnalysis();
      JSONObject smsAnalysisResult = jsonResult.getJSONObject("smsAnalysis");
      analysis.setNumberOfRecipients(smsAnalysisResult.getInt("numberOfRecipients"));
      JSONObject recipientsPerCountryJson = smsAnalysisResult.getJSONObject("recipientsPerCountry");
      if(recipientsPerCountryJson!=null && recipientsPerCountryJson.length()>0){
         for(int i=0;i<recipientsPerCountryJson.names().length();i++){
           RecipientPerCountry recipient = new RecipientPerCountry();
          // recipient.setCountryCode(recipientsPerCountryJson.names().getString(i));
           recipient.setCount(recipientsPerCountryJson.getInt(recipientsPerCountryJson.names().getString(i)));
           analysis.addRecipientPerCountry(recipient);
         }
        
      }
      if(smsAnalysisResult.has("recipientCountries")){
        JSONObject recipientsCountriesJson = smsAnalysisResult.getJSONObject("recipientCountries");
        if(recipientsCountriesJson!=null && recipientsCountriesJson.length()>0){
          for(int i=0;i<recipientsPerCountryJson.names().length();i++){
            RecipientCountry recipient = new RecipientCountry();
            recipient.setNumber(recipientsPerCountryJson.names().getString(i));
            recipient.setCountry(recipientsPerCountryJson.getString(recipientsPerCountryJson.names().getString(i)));
            analysis.addRecipientCountry(recipient);
          }
        }
      }
      if(smsAnalysisResult.has("contacts")){
        JSONArray array = smsAnalysisResult.getJSONArray("contacts");
        if(array.length()>0){
          for(int i=0;i<array.length();i++){
            analysis.addContact(array.getString(i));
          }
        }
      }
      if(smsAnalysisResult.has("recipientsPerGroup")){
        JSONObject recipientsGroupJson = smsAnalysisResult.getJSONObject("recipientsPerGroup");
        if(recipientsGroupJson!=null && recipientsGroupJson.length()>0){
          for(int i=0;i<recipientsGroupJson.names().length();i++){
            RecipientGroup group = new RecipientGroup();
            group.setGroupName(recipientsGroupJson.names().getString(i));
            group.setNumber(recipientsGroupJson.getString(recipientsGroupJson.names().getString(i)));
            analysis.addRecipientGroup(group);
          }
        }
      }
      analysis.setTotalInGroups(smsAnalysisResult.getInt("totalInGroups"));
      if(smsAnalysisResult.has("bodyAnalysis")){
        JSONObject bodyAnalysisJson = smsAnalysisResult.getJSONObject("bodyAnalysis");
        BodyAnalysis bodyAnalysis = new BodyAnalysis();
        bodyAnalysis.setParts(bodyAnalysisJson.getInt("parts"));
        bodyAnalysis.setUnicode(bodyAnalysisJson.getBoolean("unicode"));
        bodyAnalysis.setCharacters(bodyAnalysisJson.getInt("characters"));
        analysis.setBodyAnalysis(bodyAnalysis);
      }
      result.setSmsAnalysis(analysis);
    }
    result.setCost(jsonResult.getDouble("cost"));
    result.setTotalMessages(jsonResult.getDouble("totalMessages"));
    if(jsonResult.has("statuses")){
      JSONObject statusJson = jsonResult.getJSONObject("statuses");
      Status statuses = new Status();
      statuses.setQueued(statusJson.getInt("Queued"));
      statuses.setSent(statusJson.getInt("Sent"));
      statuses.setFailed(statusJson.getInt("Failed"));
      statuses.setDelivered(statusJson.getInt("Delivered"));
      statuses.setUndelivered(statusJson.getInt("Undelivered"));
      result.setStatuses(statuses);
    }
    return result;
  }

}
