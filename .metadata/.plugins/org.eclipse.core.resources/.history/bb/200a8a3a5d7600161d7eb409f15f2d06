package net.routee.accounts;

import java.io.IOException;
import java.net.URI;
import java.net.URISyntaxException;

import org.json.JSONObject;

import net.routee.authentication.RouteeAuthentication;
import net.routee.authentication.RouteeAuthenticationException;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.Response;

public class RouteeAccountsClient {
  
  public static final String DEFAULT_BASE_URL = "https://connect.routee.net";
  public static final String ENDPOINT_BALANCE = "/accounts/me/balance";
  public static final String ENDPOINT_PRICES = "/system/prices";
  public static final String ENDPOINT_TRANSACTIONS = "/accounts/me/transactions";
  public static final String ENDPOINT_BANKS = "/accounts/me/banks";
  
  private RouteeAuthentication auth = null;
  private OkHttpClient httpClient = null;
  

  public RouteeAccountsClient(final String applicationId, final String applicationSecret) {
    this.auth = new RouteeAuthentication(applicationId, applicationSecret);
  }

  public RouteeAccountsClient(RouteeAuthentication auth) {
    this.auth = auth;
  }
  
  public RouteeAccountBalance retrieveAccountBalance() throws RouteeAuthenticationException, IOException, RouteeAccountsException{
    if (this.httpClient == null)
      this.httpClient = new OkHttpClient();
    Request request = new Request.Builder().url(DEFAULT_BASE_URL + ENDPOINT_BALANCE).get()
        .addHeader("authorization", "Bearer " + this.auth.getToken())
        .addHeader("content-type", "application/json").build();
    Response response = httpClient.newCall(request).execute();
    int responseCode = response.code();
    if (responseCode == 404) {
      throw new RouteeAccountsException(response.body().string());
    }
    JSONObject jsonResponse = new JSONObject(response.body().string());
    RouteeAccountBalance balance = new RouteeAccountBalance();
    balance.setBalance(jsonResponse.getDouble("balance"));
    JSONObject jsonCurrency = jsonResponse.getJSONObject("currency");
    Currency currency = new Currency();
    currency.setCode(jsonCurrency.getString("code"));
    currency.setName(jsonCurrency.getString("name"));
    currency.setSign(jsonCurrency.getString("sign"));
    balance.setCurrency(currency);
    return balance;
  }
  
  public void retrievePricesRouteeServices(RetrievePriceParameters parameters) throws RouteeAuthenticationException, IOException, RouteeAccountsException{
    if (this.httpClient == null)
      this.httpClient = new OkHttpClient();
    
    String queryParams = "";
    if(parameters!=null){
      if(parameters.getMcc()!=null){
        queryParams = "mcc=" + parameters.getMcc();
      }
      if(parameters.getMnc()=null){
        if(queryParams.equals("")){
          queryParams = "mnc=" + param
        }
      }
    }
    
    Request request = new Request.Builder().url(DEFAULT_BASE_URL + ENDPOINT_PRICES).get()
        .addHeader("authorization", "Bearer " + this.auth.getToken())
        .addHeader("content-type", "application/json").build();
    Response response = httpClient.newCall(request).execute();
    int responseCode = response.code();
    if (responseCode == 404) {
      throw new RouteeAccountsException(response.body().string());
    }
    System.out.println(response.body().string());
  }

}
